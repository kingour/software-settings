#!/bin/bash

# Source function library.
INITD=/etc/rc.d/init.d
. $INITD/functions

# Get function listing for cross-distribution logic.
TYPESET=`typeset -f|grep "declare"`

# Get config.
. /etc/sysconfig/network

# Check that networking is up.
# We need it for pgpool
[ "${NETWORKING}" = "no" ] && exit 0

# Find the name of the script
NAME=`basename $0`
if [ ${NAME:0:1} = "S" -o ${NAME:0:1} = "K" ]
then
    NAME=${NAME:3}
fi

# For SELinux we need to use 'runuser' not 'su'
if [ -x /sbin/runuser ]
then
    SU=runuser
else
    SU=su
fi

## EDIT FROM HERE


PGPOOL_BASE="/usr/pgpool-relay/bin"

# where is psql (for status)
PSQL=/usr/pgsql-9.3/bin/psql

# pgpool configuration files directory
PREFIX_PGPOOL="/usr/pgpool-relay/etc/conf"

# Who to run the postmaster as, usually "postgres".  (NOT "root")
PGUSER=postgres

# Where is pgpool binary?
PGPOOL="$PGPOOL_BASE/pgpool"

# pgpool port
if [ "$PGPOOL_PORT" == "" ];then
    PGPOOL_PORT=9999
fi

lockfile="/var/lock/subsys/${NAME}-${PGPOOL_PORT}"

# pgpool logfile
if [ "$PGPOOLLOG" == "" ];then
    PGPOOLLOG="/home/data/logs/pgpool-${PGPOOL_PORT}.log"
fi

# pgpool user
if [ "$PGPOOL_USER" == "" ];then
        PGPOOL_USER="pgpool"
fi

# pg db
if [ "$PGDB" == "" ];then
        PGDB="template1"
fi

# Sets the path to the pool_hba.conf configuration file
# default: /usr/local/etc/pool_hba.conf
PGPOOL_HBA_CONFIG_FILE="$PREFIX_PGPOOL/pool_hba.conf"

# Sets the path to the pgpool.conf configuration file
# defailt: /usr/local/etc/pgpool.conf
PGPOOL_CONFIG_FILE="$PREFIX_PGPOOL/pgpool-${PGPOOL_PORT}.conf"

# Sets the path to the pcp.conf configuration file
# default: /usr/local/etc/pcp.conf)
PGPOOL_PCP_CONFIG_FILE="$PREFIX_PGPOOL/pcp.conf"

# How to stop pgPool-II when needed:
#Shutdown modes are:
#  smart       quit after all clients have disconnected
#  fast        quit directly, with proper shutdown
#  immediate   quit without complete shutdown; will lead to recovery on restart

PGPOOL_SHUTDOWN_MODE="fast"

## STOP EDITING HERE

# The path that is to be used for the script
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# PgPool-II start chain, will make things more readable

PGPOOL_START=""
if [ $PGPOOL_HBA_CONFIG_FILE ]
then
  PGPOOL_START="$PGPOOL_START -a $PGPOOL_HBA_CONFIG_FILE "
fi

if [ $PGPOOL_CONFIG_FILE ]
then
  PGPOOL_START="$PGPOOL_START -f $PGPOOL_CONFIG_FILE "
fi

if [ $PGPOOL_PCP_CONFIG_FILE ]
then
  PGPOOL_START="$PGPOOL_START -F $PGPOOL_PCP_CONFIG_FILE "
fi

# Import configuration from /etc/sysconfig, if it exists
[ -f /etc/sysconfig/${NAME} ] && . /etc/sysconfig/${NAME}

test -x $PGPOOL || exit 5

# Check whether the config file exists or not
if [ ! -r $PGPOOL_CONFIG_FILE ]
then
    echo "$PGPOOL_CONFIG_FILE not found"
    echo_failure
    echo
    exit 1
fi

# Create the log file if it does not exist
if [ ! -x $PGPOOLLOG ]
then
    mkdir -p `dirname $PGPOOLLOG`
    chown $PGUSER.$PGUSER `dirname $PGPOOLLOG`
    touch $PGPOOLLOG
    chown ${PGUSER}: $PGPOOLLOG
fi

# create pidfile dir
PID_FILE_NAME=`grep pid_file_name ${PGPOOL_CONFIG_FILE} | cut -d\' -f2`
PGPOOLPIDDIR=`dirname $PID_FILE_NAME`
if [ ! -d $PGPOOLPIDDIR ]
then
    mkdir -p $PGPOOLPIDDIR
    chown ${PGUSER}: $PGPOOLPIDDIR
fi

script_result=0

start(){
    PGPOOL_START_MSG=$"Starting ${NAME} service: "

    echo -n "$PGPOOL_START_MSG"
    if [ -n "`pidofproc -p $PID_FILE_NAME $PGPOOL`" ]
    then
        echo_success
        echo
        exit 0
    fi

    $SU -l $PGUSER -c "$PGPOOL $PGPOOL_START -n &" >>$PGPOOLLOG 2>&1 < /dev/null
    sleep 2

    if [ -n "`pidofproc -p $PID_FILE_NAME $PGPOOL`" ]
    then
        success "$PGPOOL_START_MSG"
        touch "$lockfile"
        echo
    else
        failure "$PGPOOL_START_MSG"
        echo
        script_result=1
    fi
}

stop(){
    PGPOOL_STOP_MSG=$"Stopping ${NAME} service: "

    echo -n "$PGPOOL_STOP_MSG"
    if [ -e "$lockfile" ]
    then
        $SU -l $PGUSER -c "$PGPOOL $PGPOOL_START -m '$PGPOOL_SHUTDOWN_MODE' stop &" >>$PGPOOLLOG 2>&1 < /dev/null

        RETVAL=$?
        if [ $RETVAL -eq 0 ]
        then
            success "$PGPOOL_STOP_MSG"
            rm -f "$lockfile"
        else
            failure "$PGPOOL_STOP_MSG"
            script_result=1
        fi
    else
        echo_success
    fi
    echo
}

restart(){
    stop
    sleep 1
    start
}

reload(){
    PGPOOL_RELOAD_MSG=$"Reloading ${NAME} configuration: "

    echo -n "$PGPOOL_RELOAD_MSG"
    if [ -n "`pidofproc -p $PID_FILE_NAME $PGPOOL`" ]
    then
        $SU -l $PGUSER -c "$PGPOOL $PGPOOL_START -m '$PGPOOL_SHUTDOWN_MODE' reload &" >>$PGPOOLLOG 2>&1 < /dev/null
    else
        failure "$PGPOOL_RELOAD_MSG"
        echo
        exit 1
    fi
    RETVAL=$?
    if [ $RETVAL -eq 0 ]; then
        success "$PGPOOL_RELOAD_MSG"
    else
        failure "$PGPOOL_RELOAD_MSG"
        script_result=1
    fi
    echo
}

condrestart(){
    [ -e "$lockfile" ] && restart
}

condstop(){
    [ -e "$lockfile" ] && stop
}

nodes() {
    $SU -l $PGUSER -c "$PSQL -p $PGPOOL_PORT -U $PGPOOL_USER -d $PGDB -c \"show pool_nodes\""
}

detach() {
    PGPOOL_DETACH_MSG=$"Detaching node of ${NAME}: "
    echo -n "$PGPOOL_DETACH_MSG"
    if [[ ! -f ~/.pcppass || x"`cat ~/.pcppass |grep $PGPOOL_USER | grep 9898`" == x""  ]];then
        echo ".pcppass not configed"
        failure "$PGPOOL_DETACH_MSG"
        echo
        exit 1
    fi
    $PGPOOL_BASE/pcp_detach_node -U${PGPOOL_USER} -w -n $1
}

attach() {
    PGPOOL_ATTACH_MSG=$"Attaching node of ${NAME}: "
    echo -n "$PGPOOL_ATTACH_MSG"
    if [[ ! -f ~/.pcppass || x"`cat ~/.pcppass |grep $PGPOOL_USER | grep 9898`" == x""  ]];then
        echo ".pcppass not configed"
        failure "$PGPOOL_ATTACH_MSG"
        echo
        exit 1
    fi
    $PGPOOL_BASE/pcp_attach_node -U${PGPOOL_USER} -w -n $1
}

watchdog() {
    PGPOOL_WATCHDOG_MSG=$"WATCHDOG of ${NAME}: "
    echo -n "$PGPOOL_WATCHDOG_MSG"
    if [[ ! -f ~/.pcppass || x"`cat ~/.pcppass | grep $PGPOOL_USER | grep 9898`" == x""  ]];then
        echo ".pcppass not configed"
        failure "$PGPOOL_WATCHDOG_MSG"
        echo
        exit 1
    fi
    $PGPOOL_BASE/pcp_watchdog_info -U${PGPOOL_USER} -w
}

# See how we were called.
case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status -p $PID_FILE_NAME pgpool
        script_result=$?
        ;;
  nodes)
        nodes
        ;;
  watchdog)
        watchdog
        ;;
  attach)
        attach $2
        ;;
  detach)
        detach $2
        ;;
  restart)
        restart
        ;;
  reload|force-reload)
        reload
        ;;
  condrestart|try-restart)
        condrestart
        ;;
  condstop)
        condstop
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|restart|nodes|detach|attach|watchdog|condrestart|try-restart|condstop|reload|force-reload}"
        exit 2
esac

exit $script_result
